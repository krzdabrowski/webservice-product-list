package com.example.trubul.productlist.AndroidKsoap.com.Wsdl2Code.WebServices.Service1;
//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 5/30/2018 7:34:44 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import android.os.AsyncTask;

import org.ksoap2.HeaderProperty;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.Marshal;
import org.ksoap2.serialization.MarshalFloat;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;

import java.util.List;

public class Service1 {

    public String NAMESPACE = "http://rfidsolutions.pl/";
    public String url = "";
    public int timeOut = 180;
    public IWsdl2CodeEvents eventHandler;
    public WS_Enums.SoapProtocolVersion soapVersion;

    public Service1() {
    }

    public Service1(IWsdl2CodeEvents eventHandler) {
        this.eventHandler = eventHandler;
    }

    public Service1(IWsdl2CodeEvents eventHandler, String url) {
        this.eventHandler = eventHandler;
        this.url = url;
    }

    public Service1(IWsdl2CodeEvents eventHandler, String url, int timeOutInSeconds) {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }

    public void setTimeOut(int seconds) {
        this.timeOut = seconds * 1000;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public void GetAllProductListAsync() throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        GetAllProductListAsync(null);
    }

    public void GetAllProductListAsync(final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, InventoryProductList>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected InventoryProductList doInBackground(Void... params) {
                return GetAllProductList(headers);
            }

            @Override
            protected void onPostExecute(InventoryProductList result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("GetAllProductList", result);
                }
            }
        }.execute();
    }

    public InventoryProductList GetAllProductList() {
        return GetAllProductList(null);
    }

    public InventoryProductList GetAllProductList(List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://rfidsolutions.pl/", "GetAllProductList");
        soapEnvelope.setOutputSoapObject(soapReq);
        Marshal floatMarshal = new MarshalFloat();
        floatMarshal.register(soapEnvelope);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://rfidsolutions.pl/GetAllProductList", soapEnvelope, headers);
            } else {
                httpTransport.call("http://rfidsolutions.pl/GetAllProductList", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    InventoryProductList resultVariable = new InventoryProductList(j);
                    return resultVariable;

                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void SaveProductSellingAsync(InventoryProductList sellingProductList) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        SaveProductSellingAsync(sellingProductList, null);
    }

    public void SaveProductSellingAsync(final InventoryProductList sellingProductList, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            ;

            @Override
            protected String doInBackground(Void... params) {
                return SaveProductSelling(sellingProductList, headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("SaveProductSelling", result);
                }
            }
        }.execute();
    }

    public String SaveProductSelling(InventoryProductList sellingProductList) {
        return SaveProductSelling(sellingProductList, null);
    }

    public String SaveProductSelling(InventoryProductList sellingProductList, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://rfidsolutions.pl/", "SaveProductSelling");
        soapEnvelope.addMapping("http://rfidsolutions.pl/", "sellingProductList", new InventoryProductList().getClass());
        soapReq.addProperty("sellingProductList", sellingProductList);
        soapEnvelope.setOutputSoapObject(soapReq);
        Marshal floatMarshal = new MarshalFloat();
        floatMarshal.register(soapEnvelope);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://rfidsolutions.pl/SaveProductSelling", soapEnvelope, headers);
            } else {
                httpTransport.call("http://rfidsolutions.pl/SaveProductSelling", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

}
