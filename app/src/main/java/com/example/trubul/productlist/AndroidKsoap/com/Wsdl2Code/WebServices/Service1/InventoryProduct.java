package com.example.trubul.productlist.AndroidKsoap.com.Wsdl2Code.WebServices.Service1;
//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 5/30/2018 7:34:44 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.util.Hashtable;

public class InventoryProduct implements KvmSerializable {

    public int id_product;
    public int id_store;
    public String name_store;
    public int id_zone;
    public String name_zone;
    public int id_subzone;
    public String name_subzone;
    public String name_product_type;
    public String unique_code;
    public String status_code;
    public float price;
    public float currentPrice;
    public String webRepsponse;
    public boolean counted;
    public String readDate;
    public int counted_id_user;
    public String counted_user_name;
    public TagList listTags;
    public VectorparametersLinkValues parameters_values;

    public InventoryProduct() {
    }

    public InventoryProduct(SoapObject soapObject) {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("id_product")) {
            Object obj = soapObject.getProperty("id_product");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                id_product = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                id_product = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("id_store")) {
            Object obj = soapObject.getProperty("id_store");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                id_store = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                id_store = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("name_store")) {
            Object obj = soapObject.getProperty("name_store");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                name_store = j.toString();
            } else if (obj != null && obj instanceof String) {
                name_store = (String) obj;
            }
        }
        if (soapObject.hasProperty("id_zone")) {
            Object obj = soapObject.getProperty("id_zone");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                id_zone = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                id_zone = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("name_zone")) {
            Object obj = soapObject.getProperty("name_zone");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                name_zone = j.toString();
            } else if (obj != null && obj instanceof String) {
                name_zone = (String) obj;
            }
        }
        if (soapObject.hasProperty("id_subzone")) {
            Object obj = soapObject.getProperty("id_subzone");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                id_subzone = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                id_subzone = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("name_subzone")) {
            Object obj = soapObject.getProperty("name_subzone");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                name_subzone = j.toString();
            } else if (obj != null && obj instanceof String) {
                name_subzone = (String) obj;
            }
        }
        if (soapObject.hasProperty("name_product_type")) {
            Object obj = soapObject.getProperty("name_product_type");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                name_product_type = j.toString();
            } else if (obj != null && obj instanceof String) {
                name_product_type = (String) obj;
            }
        }
        if (soapObject.hasProperty("unique_code")) {
            Object obj = soapObject.getProperty("unique_code");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                unique_code = j.toString();
            } else if (obj != null && obj instanceof String) {
                unique_code = (String) obj;
            }
        }
        if (soapObject.hasProperty("status_code")) {
            Object obj = soapObject.getProperty("status_code");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                status_code = j.toString();
            } else if (obj != null && obj instanceof String) {
                status_code = (String) obj;
            }
        }
        if (soapObject.hasProperty("price")) {
            Object obj = soapObject.getProperty("price");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                price = Float.parseFloat(j.toString());
            } else if (obj != null && obj instanceof Number) {
                price = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("currentPrice")) {
            Object obj = soapObject.getProperty("currentPrice");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                currentPrice = Float.parseFloat(j.toString());
            } else if (obj != null && obj instanceof Number) {
                currentPrice = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("webRepsponse")) {
            Object obj = soapObject.getProperty("webRepsponse");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                webRepsponse = j.toString();
            } else if (obj != null && obj instanceof String) {
                webRepsponse = (String) obj;
            }
        }
        if (soapObject.hasProperty("counted")) {
            Object obj = soapObject.getProperty("counted");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                counted = Boolean.parseBoolean(j.toString());
            } else if (obj != null && obj instanceof Boolean) {
                counted = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("readDate")) {
            Object obj = soapObject.getProperty("readDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                readDate = j.toString();
            } else if (obj != null && obj instanceof String) {
                readDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("counted_id_user")) {
            Object obj = soapObject.getProperty("counted_id_user");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                counted_id_user = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                counted_id_user = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("counted_user_name")) {
            Object obj = soapObject.getProperty("counted_user_name");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                counted_user_name = j.toString();
            } else if (obj != null && obj instanceof String) {
                counted_user_name = (String) obj;
            }
        }
        if (soapObject.hasProperty("listTags")) {
            SoapObject j = (SoapObject) soapObject.getProperty("listTags");
            listTags = new TagList(j);

        }
        if (soapObject.hasProperty("parameters_values")) {
            SoapObject j = (SoapObject) soapObject.getProperty("parameters_values");
            parameters_values = new VectorparametersLinkValues(j);
        }
    }

    @Override
    public Object getProperty(int arg0) {
        switch (arg0) {
            case 0:
                return id_product;
            case 1:
                return id_store;
            case 2:
                return name_store;
            case 3:
                return id_zone;
            case 4:
                return name_zone;
            case 5:
                return id_subzone;
            case 6:
                return name_subzone;
            case 7:
                return name_product_type;
            case 8:
                return unique_code;
            case 9:
                return status_code;
            case 10:
                return price;
            case 11:
                return currentPrice;
            case 12:
                return webRepsponse;
            case 13:
                return counted;
            case 14:
                return readDate;
            case 15:
                return counted_id_user;
            case 16:
                return counted_user_name;
            case 17:
                return listTags;
            case 18:
                return parameters_values;
        }
        return null;
    }

    @Override
    public int getPropertyCount() {
        return 19;
    }

    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch (index) {
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "id_product";
                break;
            case 1:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "id_store";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "name_store";
                break;
            case 3:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "id_zone";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "name_zone";
                break;
            case 5:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "id_subzone";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "name_subzone";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "name_product_type";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "unique_code";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "status_code";
                break;
            case 10:
                info.type = Float.class;
                info.name = "price";
                break;
            case 11:
                info.type = Float.class;
                info.name = "currentPrice";
                break;
            case 12:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "webRepsponse";
                break;
            case 13:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "counted";
                break;
            case 14:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "readDate";
                break;
            case 15:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "counted_id_user";
                break;
            case 16:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "counted_user_name";
                break;
            case 17:
                info.type = TagList.class;
                info.name = "listTags";
                break;
            case 18:
                info.type = PropertyInfo.VECTOR_CLASS;
                info.name = "parameters_values";
                break;
        }
    }


    @Override
    public void setProperty(int arg0, Object arg1) {
    }

}
